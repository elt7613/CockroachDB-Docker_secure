#!/bin/bash

echo "================================="
echo "CockroachDB Fault Tolerance Test"
echo "================================="

echo ""
echo "üß™ This script demonstrates cluster fault tolerance"
echo "‚ö†Ô∏è  Only run this AFTER your cluster is fully initialized"
echo ""

# Function to check cluster status
check_cluster() {
    echo "üìä Current cluster status:"
    docker exec roach-0 cockroach node status --certs-dir=/certs --host=localhost:26257 2>/dev/null || \
    docker exec roach-1 cockroach node status --certs-dir=/certs --host=localhost:26257 2>/dev/null || \
    docker exec roach-2 cockroach node status --certs-dir=/certs --host=localhost:26257 2>/dev/null || \
    echo "‚ùå No nodes are accessible"
}

# Function to test database operations
test_operations() {
    local node=$1
    echo "üîç Testing operations on $node..."
    
    if docker ps | grep -q "$node"; then
        # Try to query
        docker exec $node cockroach sql --certs-dir=/certs --host=localhost:26257 --execute "SELECT now();" 2>/dev/null && \
        echo "‚úÖ $node is responding to queries" || \
        echo "‚ùå $node is not responding"
    else
        echo "‚ùå $node container is not running"
    fi
}

echo ""
echo "üîç Initial cluster state:"
check_cluster

echo ""
echo "üß™ Testing individual node operations:"
test_operations "roach-0"
test_operations "roach-1" 
test_operations "roach-2"

echo ""
echo "üí° Fault Tolerance Scenarios:"
echo ""
echo "1Ô∏è‚É£  VM1 failure simulation:"
echo "   - Stop VM1: docker compose -f docker-compose-vm1.yml down"
echo "   - VM2 & VM3 continue operating (2/3 majority)"
echo "   - Admin UI accessible via VM2 or VM3"
echo ""

echo "2Ô∏è‚É£  VM2 failure simulation:"
echo "   - Stop VM2: docker compose -f docker-compose-vm2.yml down" 
echo "   - VM1 & VM3 continue operating (2/3 majority)"
echo "   - Admin UI accessible via VM1 or VM3"
echo ""

echo "3Ô∏è‚É£  Any 2 VMs failure:"
echo "   - Cluster goes read-only (can't reach majority)"
echo "   - Data remains safe and consistent"
echo "   - Cluster resumes when majority restored"
echo ""

echo "üîÑ Recovery scenarios:"
echo "   - Restart failed VM: ./up-vm[X].sh"
echo "   - Node automatically rejoins cluster"
echo "   - No manual intervention needed"
echo ""

echo "üè• Health monitoring:"
echo "   - Use ./status.sh to check cluster health"
echo "   - Monitor Admin UI on any available node"
echo "   - Watch for node liveness in gossip network"

echo ""
echo "‚úÖ Your cluster is configured for maximum fault tolerance!"
echo "Each node knows about all other nodes for discovery and failover." 